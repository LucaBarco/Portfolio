System and Device Programming
Laboratory number 03 (System and Programming part)



Learning goals
--------------

Windows API and operating system basics, more specifically:
style, types, UNICODE encoding, files.



Exercise 01
-----------

The program
ex01.cpp
(present in 3 different version in this directory)
implements in Visual Studio Windows API the program
of exercize 01 laboratory 01.

Perform the following steps:
- Create a new project and insert the program within the MS Visual
  Studio environment.
- Set the command line parameters.
- Build (compile) the project.
- As it contains (3?) syntax errors correct them.
- Once obtained the executable code, run it.
- As it contains a bug, debug it using the basic features of
  the Visual Studio debugger.
  Learn how to:
  - set a break-point in the code
  - proceed step-by-step
  - visualize variable values
  - see thread configuration
  - etc.



Exercise 02
-----------

A data base is given on a single *binary* file with *fixed-length*
records.
The format of this file is the one *generated in Exercise 01*.

The program has to implement a user menu with the following options:

- R n: Where R is the character "R", and n is an integer value.
       Read from file all data fields for the student number n and
       print them on standard output.

- W n: Where W is the character "W", and n is an integer value.
       Read from standard input all data fields for the student number
       n and write them on the file in position n.
       
- E: End the program.

The input file name is given on the command line.

The following is an example of execution (using the file presented in
laboratory 01):

user choice: R 3     // The user wants to read info for student 3
3 200000 Verdi Giacomo 15
user choice: R 1     // The user wants to read info for student 1
1 100000 Romano Antonio 25
user choice: W 1     // The user wants to over-write info for student 1
                     // with info read from standard input
Data: 1 100000 Romano Antonio 27
                     // Read input data and store them for student 1
user choice: W 5     // The user wants to add data for student 5
                     // with info read from standard input
data: 5 157143 White House 30
                     // Read input data and store them for student 1
user choice: E       // The user wants to end the program
stop program

Noticed that
1) the input file is supposed to be the one generated in
   Exercise 02
2) "//" specifies explanatory comments not program I/O lines
   "R 3", "R 1", "W 1", etc. are the user inputs, all other characters
   belong to the program output.

Write three versions of the program:
- Version A
  read and write the file using SetFilePointerEx
- Version B
  read and write the file using an overlapped data structure 
- Version C
  lock each record before reading (or writing) it, and release the
  same record as soon as the operation has been performed.
  (Notice that locking for now is useless, but it will be useful with
  multi-threaded applications).



Exercise 03
(Before solving this problem, see u04s03-filesystemmanagement.pdf)
------------------------------------------------------------------

Copy a directory tree and modify each source file while copying it.
 
A C program is run with two parameters
name1 name2
where name1 and name2 are C strings which indicates relative
or absolute paths of two directory trees.

The program must copy the directory name1 into an isomorphic
directory name2.
For each file copied from the first to the second directory tree, the
program has to add two data fields on top of the destination file
specifying:
- the first one, the name of the file (C string) 
- the second one, the size of the source (original) file
  (a 32-bit or 64-bit integer value at choice).
